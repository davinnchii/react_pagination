{"version":3,"sources":["utils.ts","App.tsx","components/Pagination/Pagination.tsx","components/ItemsList/index.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","DefaultPageValues","Pagination","total","perPage","currentPage","onPageChange","pages","Math","ceil","isFirstPageActive","isLastPageActive","length","className","cn","disabled","href","onClick","map","pageNumber","active","ItemsList","itemsNumbers","firstPageIndex","lastPageIndex","min","currentTableData","useMemo","slice","item","App","useState","startPage","setCurrentPage","defaultPageSize","itemsPerPage","setPerPage","startIndex","endIndex","totalPages","id","defaultValue","onChange","event","Number","currentTarget","value","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7eda8645.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination/Pagination';\nimport { ItemsList } from './components/ItemsList';\n\nenum DefaultPageValues {\n  startPage = 1,\n  defaultPageSize = 5,\n  totalPages = 42,\n}\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(DefaultPageValues.startPage);\n  const [itemsPerPage, setPerPage] = useState(\n    DefaultPageValues.defaultPageSize,\n  );\n  const startIndex = currentPage * itemsPerPage - itemsPerPage + 1;\n  const endIndex = currentPage * itemsPerPage > DefaultPageValues.totalPages\n    ? DefaultPageValues.totalPages\n    : currentPage * itemsPerPage;\n\n  const handleItemsPerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(Number(event?.currentTarget.value));\n    setCurrentPage(DefaultPageValues.startPage);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startIndex} - ${endIndex} of ${DefaultPageValues.totalPages})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            defaultValue={DefaultPageValues.defaultPageSize}\n            onChange={handleItemsPerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={DefaultPageValues.totalPages}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={(pageNumber: number) => setCurrentPage(pageNumber)}\n      />\n      <ItemsList\n        total={DefaultPageValues.totalPages}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (pageNumber: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pages: number[] = getNumbers(1, Math.ceil(total / perPage));\n\n  const isFirstPageActive = currentPage === 1;\n  const isLastPageActive = currentPage === pages.length;\n\n  const previousPageHandler = () => {\n    if (!isFirstPageActive) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const nextPageHandler = () => {\n    if (!isLastPageActive) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item', { disabled: isFirstPageActive })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPageActive}\n          onClick={previousPageHandler}\n        >\n          «\n        </a>\n      </li>\n      {pages.map((pageNumber: number) => (\n        <li\n          className={cn('page-item',\n            { active: currentPage === pageNumber })}\n          key={pageNumber}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${pageNumber}`}\n            onClick={() => onPageChange(pageNumber)}\n          >\n            {pageNumber}\n          </a>\n        </li>\n      ))}\n      <li className={cn('page-item',\n        { disabled: isLastPageActive })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPageActive}\n          onClick={nextPageHandler}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import { useMemo } from 'react';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n};\n\nexport const ItemsList: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n}) => {\n  const itemsNumbers: number[] = getNumbers(1, total);\n\n  const firstPageIndex = (currentPage - 1) * perPage;\n  const lastPageIndex = Math.min(firstPageIndex + perPage, itemsNumbers.length);\n  const currentTableData = useMemo(() => {\n    return itemsNumbers.slice(firstPageIndex, lastPageIndex);\n  }, [currentPage, perPage]);\n\n  return (\n    <ul>\n      {currentTableData.map((item) => (\n        <li\n          data-cy=\"item\"\n          key={item}\n        >\n          {`Item ${item}`}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}